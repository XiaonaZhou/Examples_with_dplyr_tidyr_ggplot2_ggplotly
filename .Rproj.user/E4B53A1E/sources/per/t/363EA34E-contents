---
title: "All about tidyr"
author: "Xiaona Zhou"
date: "4/19/2020"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```



```{r global}
library(tidyr)
library(tidyverse)
library(data.table)
comp <- c(1,1,1,2,2,2,3,3,3)
yr <- c(1998,1999,2000,1998,1999,2000,1998,1999,2000)
q1 <- runif(9, min=0, max=100)
q2 <- runif(9, min=0, max=100)
q3 <- runif(9, min=0, max=100)
q4 <- runif(9, min=0, max=100)

df <- data.frame(comp=comp,year=yr,Qtr1 = q1,Qtr2 = q2,Qtr3 = q3,Qtr4 = q4)

stocks <- data.frame(
  time = as.Date('2009-01-01') + 0:9,
  X = rnorm(10, 0, 1),
  Y = rnorm(10, 0, 2),
  Z = rnorm(10, 0, 4)
)
stocks

```


## gather

gather: restructure the data 
gather(data, key, value, column_names)

```{r gather1, message=FALSE, warning=FALSE}
df %>% 
  gather(Quarter, Revenue, Qtr1:Qtr4)# stacking all the values
```


##### Another Example

```{r gather2, message=FALSE, warning=FALSE}
stocks %>% 
  gather(stock, price, X:Z)# stacking all the values
```

## spread

spread: undo gather()

```{r spread, message=FALSE, warning=FALSE}
stock_gathered <- stocks %>% 
  gather(stock, price, X:Z)
stock_gathered %>% spread(stock,price)# undo gather

# Anather Example of Spread
stock_gathered %>% spread(time, price)

```


## separate

separate: turn a single character column into multiple columns
separate(data, target_column_name, c('new_col_name_1','new_col_name2'))
Note: by default, it is separated by non alphanumeric values, like . -

```{r separate1, message=FALSE, warning=FALSE}
df <- data.frame(x = c(NA, "a.x", "b.y", "c.z"))
df
df %>% separate(x, c("ABC", "XYZ"))
```

#### Another Example

```{r separate2, message=FALSE, warning=FALSE}
df1 <- data.frame(new_col = c(NA, "a-x", "b-y", "c-z"))
df1
separate(data = df1, col=new_col, into = c("abc", "xyz"), sep = '-')
# or 

separate(data = df1, col=new_col, into = c("abc", "xyz"))

#or 

df1 %>% separate(new_col, c("abc", "xyz"))
```


## unite

unite: undo spread; combine multiple columns into one 
unite(data, new_col_name, col_names_to_be_joined_separated_by_commas)

```{r unite, message=FALSE, warning=FALSE}
df1 <- data.frame(new_col = c(NA, "a-x", "b-y", "c-z"))
df1_sep <- separate(data = df1, col=new_col, into = c("abc", "xyz"), sep = '-')
df1_sep %>% 
  unite(new_joined, abc,xyz, sep = '---' )

```


# Join tables
1. inner_join(data1, data2) keeps the common rows and drops other rows
2. left_join(data1, data2) keeps all the rows in data1 add the extra columns from data2 if they are in common, put NA when no data available.
Note: right_join() is similar to left. Same result returns when switch data1 and data 2. 

3. full_join(data1, data2) keeps all rows from both data set, use NA when no data is available. 

4. anti_join: shows the rows in the left table that don't have a match in the right one.
Note: Most commonly you'd use it to check that rows weren't dropped from the left table.For instance, you could check that the number of rows in an anti join is zero.
```{r }
# create two tables with a common column name x1

df1 <- tibble(x1 = c('A','B','C','E','A'),
              x2 = c(1,2,3,4,5))
df2 <- tibble(x1 = c('A','B','D'),
              x3 = c(T,F,T))
df1
df2
inner_join(df1,df2)
left_join(df1,df2)
left_join(df2, df1)
full_join(df1, df2)
anti_join(df1,df2)#shows the rows that have been dropped by inner_join()
nrow(anti_join(df1,df2))==0
```

# Example of Reshaping data

### data
```{r reshaping}
states <- tibble(name = rep(state.name[1:3], times = 2),
                 dimension = rep(c('Area','Population'), each = 3),
                 stat = c(state.x77[1:3, "Area"], state.x77[1:3, "Population"] * 1e3))
states <- slice(states, 1:5)
states

```

### spread the data (reformat)

1. spread(data, key, value)
```{r reformat}
states_wide <- states %>% 
  spread(dimension,stat)
states_wide
```

# Gathering data


Sample data:

* gsub(pattern, replacement, x/target); used to change coloumn name below. 
```{r data_g}
state_pop_by_year <- states_wide %>%
    mutate(year_1977 = Population,
           year_1978 = 1.05 * year_1977,
           year_1979 = 1.05 * year_1978) %>%
    select(name, year_1977, year_1978, year_1979)
names(state_pop_by_year) <- gsub('year_', '', names(state_pop_by_year))
state_pop_by_year
```

### Use gather to have "name", "year", "population" as column names

* gather(data, "new column name","new column name", "old column names")


```{r gather1}
# Method 1 
gather(state_pop_by_year, "year", "population", '1977', '1978', '1979')

# Method 2
gather(state_pop_by_year, "year", "population", matches('^197?'))# '^197?' : starting with 197

# Method 3
gather(state_pop_by_year, "year", "population", -name) # -name, exculde column name, include all others

# Method 4

gather(state_pop_by_year, matches('^197?'), key = "year", value="population")
```